// Code generated DO NOT EDIT
// This code is AUTOGENERATED and will be overwritten by "go generate", so
// editing this file is a waste of time. To make changes, edit the template
// in pkg/generator/template/subcommand.tmpl. If you want to execute things
// before or after the command is executed, use a hook. See the usage_hook.go
// as an example.

package {{.Definition.Name}}

import (
	cloudv1 "buf.build/gen/go/gportal/gportal-cloud/protocolbuffers/go/gpcloud/api/cloud/v1"
	"encoding/json"
    {{- if HasPrefix .Action.APICall.Endpoint "List" }}
	"github.com/jedib0t/go-pretty/v6/table"
	{{- if eq (len .Action.Fields) 0}}
	"reflect"
	{{- end}}
	"os"
	{{- end}}
	"github.com/G-PORTAL/gpcloud-go/pkg/gpcloud/client"
	"github.com/spf13/cobra"
	"gpcloud-cli/pkg/config"
)
{{range $key, $value := .Action.Params}}
var {{$key}} {{$value}}
{{- end}}

var {{.Name|ToCamel}}Cmd = &cobra.Command{
	Use:                   "{{.Name}}",
	Short:                 "{{.Action.Description}}",
	Long:                  "{{.Action.Description}}",
	DisableFlagsInUseLine: true,
	Args:                  cobra.OnlyValidArgs,
	{{- if gt (len .Action.Params) 0}}
	ValidArgs: []string{
	    {{range $key, $value := .Action.Params}}"{{$key}}",
	    {{- end}}
	},
	{{end}}
	RunE: func(cmd *cobra.Command, args []string) error {
		conn := cmd.Context().Value("conn").(*client.Client)
		{{- if ne .Definition.Identifier "" }}
		session := cmd.Context().Value("session").(*config.SessionConfig)
        {{- end}}
		resp, err := conn.{{.Action.APICall.Client|Title}}Client().{{.Action.APICall.Endpoint}}(cmd.Context(), &cloudv1.{{.Action.APICall.Endpoint}}Request{
		    {{- if ne .Definition.Identifier "" }}
		    Id:       *{{.Definition.Identifier}},
		    {{- end}}
	        {{- range $key, $value := .Action.Params}}
	        {{$key|Title}}: {{$key}},
	        {{- end}}
		})
		if err != nil {
			return err
		}

		// TODO: Call hook if exist

        {{- if HasPrefix .Action.APICall.Endpoint "List" }}
        // Remove root key
        {{ $rootKey := .Action.RootKey }}
		{{- if eq .Action.RootKey ""}}
        {{ $rootKey = .Name|Pluralize|ToCamel|Title}}
        {{- end}}

		respData := resp.{{$rootKey}}

		// Build the table
		// TODO: Handle nested structures
		headerRow := table.Row{}

		tbl := table.NewWriter()
		tbl.SetStyle(table.StyleRounded)
		tbl.SetOutputMirror(os.Stdout)

		{{- if eq (len .Action.Fields) 0}}
		for j, entry := range respData {
			// Use all fields
			c := reflect.ValueOf(*entry)
			//row := make([]table.Row, c.NumField())
			row := table.Row{}

			for i := 0; i < c.NumField(); i++ {
				// Skip all unexported fields
				if c.Type().Field(i).IsExported() {
					row = append(row, c.Field(i).Interface())

					if j == 0 {
						headerRow = append(headerRow, c.Type().Field(i).Name)
					}
				}
			}
			tbl.AppendRow(row)
		}

        {{- range $key, $value := .Action.Fields}}
        headerRow = append(headerRow, "{{$value|Title}}")
        {{- end}}
		tbl.AppendHeader(headerRow)

		{{- else }}
		// Only use whitelist fields
		for i, entry := range respData {
            row := make([]interface{}, 0)

            {{- range $key, $value := .Action.Fields}}
            row = append(row, entry.{{$value|Title}})
            if i == 0 {
                headerRow = append(headerRow, "{{$value|Title}}")
            }
            {{- end}}

            tbl.AppendRow(row)
        }
		tbl.AppendHeader(headerRow)
		{{- end}}

		if config.CSVOutput {
            tbl.RenderCSV()
            return nil
        }

		if !config.JSONOutput {
            tbl.Render()
        }

		{{- else}}
		// Single response
		respData := resp
        {{- end}}

		if config.JSONOutput {
			jsonData, err := json.MarshalIndent(respData, "", "  ")
			if err != nil {
				return err
			}
			cmd.Println(string(jsonData))
		}

		return nil
	},
}

func init() {
    {{- $subcommand := .Name}}
    {{- range $key, $value := .Action.Params}}
    {{- $datatypeDefaultValue := "nil"}}
    {{- if eq $value "string"}}
      {{- $datatypeDefaultValue = `""`}}
    {{- end}}
    {{- if eq $value "bool"}}
      {{- $datatypeDefaultValue = `false`}}
    {{- end}}
    {{- if eq $value "int"}}
      {{- $datatypeDefaultValue = `0`}}
    {{- end}}
    {{$subcommand}}Cmd.Flags().{{$value|Title}}Var(&{{$key}}, "{{$key}}", {{$datatypeDefaultValue}}, "TODO: Add description")
    {{- end}}

	Root{{.Definition.Name|Title}}Command.AddCommand({{$subcommand|ToCamel}}Cmd)
}
